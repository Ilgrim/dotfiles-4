UNAME=$(uname)

source ~/.commonfuncs

# what freakin' linux is this?
alias what_linux="cat /etc/issue"

# switch over to the simple prompt
alias sp='source ~/.zshprompt_simple'
# re link all the conf files
alias qs='$HOME/.dotfiles/create_links.sh'

# prefer vim over vi
if checkPath nvim; then
    alias vi=nvim
    alias vim=nvim
elif checkPath vim; then
    alias vi=vim
else
    # keep me honest
    alias vim=vi
fi

# use gvim or mvim for either command
if checkPath gvim; then
    alias mvim=gvim
else
    # keep me honest
    alias gvim=mvim
fi

alias v=vim
# Open vim with nerdtree open
alias vn="vim -c ':NERDTree | wincmd l'"

# use gitx with "all branches"
alias gitxa="gitx --all"
# use git-achievements if it is avaiable
if checkPath git-achievements; then
    alias git=git-achievements
fi

# some OS X specific stuff
if [[ $UNAME == "Darwin" ]]; then
    os_majorversion=$(sw_vers | awk '/ProductVersion/ {print $2}' | cut -f2 -d'.')

    # set up a path in .profile for TextMate (zsh haterz)
    # NOTE: this will overwrite the .profile
    echo "export PATH=$PATH" > ~/.profile

    # Quickly re-enable refit
    alias refi=/efi/refit/enable.sh

    if checkPath mysql5; then
        # I have mysql5 installed with MacPorts, which adds the 5
        alias mysql='mysql5'
    fi

    # For OS X >= 10.8, you'll need the EnvPane pref pane
    # http://diaryproducts.net/EnvPane
    # OR
    # https://stackoverflow.com/questions/603785/environment-variables-in-mac-os-x/4567308#4567308
    if [ "$os_majorversion" -le 7 ]; then
        if checkPath defaults; then
            # also set up the osx path
            # (this will overwrite the PATH everytime we open a shell)
            defaults write ~/.MacOSX/environment PATH -string "$PATH"
        fi
    fi

    # add ports into the $MANPATH
    export MANPATH=/opt/local/man:$MANPATH
fi

# grepping (or acking)
# sgrep stands for super grep, meaning recursive and case insensitive
if checkPath pt; then
    alias sgrep=pt
elif checkPath ag; then
    alias sgrep=ag
elif checkPath ack; then
    alias sgrep=ack
elif checkPath ack-grep; then
    alias sgrep=ack-grep
else
    # using the GNU grep trunk with the exclude dir opt
    #alias grep='grep -EIn --exclude-dir=".svn" --exclude-dir="CVS" --exclude=".DS_STORE" --exclude="*pyc" --color=always'
    alias sgrep='grep -EIn --exclude=".DS_STORE" --exclude="*pyc" --color=always'
    alias sgrep='grep -ir'
fi

## ctags
alias ctags='ctags --exclude=node_modules'

## processes
alias psa='ps axwww'
alias psau='psa -u'
# pipe into grep to find a proc
alias psg='psa | grep -i'
# search for python procs
alias ispy='psg "[p]ython"'
# search for ruby procs
alias isrb='psg "[r]uby"'

# supervisor in buildouts
alias bsctl=bin/supervisorctl
# system wide supervisor
if checkPath supervisorctl; then
    alias sctl=supervisorctl
fi

alias lsofp="sudo lsof -p"

# find aliases
alias delpyc="find . -name '*.pyc' -delete"
alias brokensymlinks="find -L . -type l"

# svn helpers
alias svnps="svn propset svn:externals -F EXTERNALS.txt ."
alias svnpsi="svn propset svn:ignore -F IGNORE.txt ."
# Needs to be a better way to do this... (global aliases + zsh, see the .zshrc)
export sfuprivate='https://svn.sixfeetup.com/svn/private'
export sfupublic='https://svn.sixfeetup.com/svn/public'

# zope runs most QA/Staging instances...
alias zu='sudo -H -u zope'
alias ku='sudo -H -u karl'

# buildout...
alias bbn='bin/buildout'
alias bbN='bin/buildout -N'
alias bbc="rm -rf parts develop-eggs fake-eggs .installed.cfg"
# mr.developer shortcuts
alias bd="bin/develop"
alias bdu="bd up -v"
alias bds="bd st -v"
# creating the buildout.cfg
if [ "$UNAME" = "FreeBSD" ]; then
    alias bcl='cp profiles/buildout.cfg.tmpl buildout.cfg && sed -I "" -e "s/#\(    profiles\/local\.cfg\)/\1/" buildout.cfg'
else
    alias bcl='cp profiles/buildout.cfg.tmpl buildout.cfg && sed -i "" -e "s/#\(    profiles\/local\.cfg\)/\1/" buildout.cfg'
fi

# pep8 that can scan a `src` dir
alias pep8scan="pep8 --repeat --show-source --statistics --exclude='paste,*PasteDeploy*,bootstrap.py'"

# Ruby and rvm stuff
alias ru='rvm use'
alias rud='ru default@tb'
alias rum='ru default@mailcatcher'

# bundler
alias be='bundle exec'

# Zeus.
alias z='zeus'
alias zss='z start'
alias zs='z server Puma -p 3001'
alias zc='z console'
alias zr='z rake'
alias zt='z test'

# Vagrant ssh commands
alias vssh="vagrant ssh"

vs() {
    vagrant ssh -c "rvm use default@tb && cd /vagrant && $1"
}
alias vsss="vs 'zeus start'"
alias vss="vs 'zeus server Puma -p 3001'"
alias vsc="vs 'zeus console'"
alias vsr="vs 'zeus rake'"
alias vst="vs 'zeus test'"
alias vsd="vs 'zeus dbconsole'"

# I have a folder of custom made fortunes...
if checkPath fortune && [ -d /opt/local/share/games/fortune/comedy ]; then
    alias laugh='echo; fortune comedy ;echo'
fi

# make cp and move ask before replacing files
alias cp='cp -iv'
alias mv='mv -i'

# conditionally set up coloring on different OS types for ls
# Using the variable trick from:
# http://www.xsteve.at/prg/zsh/.zshrc
if [ $UNAME = "FreeBSD" ] || [ $UNAME = "Darwin" ]; then
   LS_COLOR_OPTION="-G"
elif [ $UNAME = "Linux" ]; then
   LS_COLOR_OPTION="--color=auto"
elif [ $UNAME = 'SunOS' ]; then
   LS_COLOR_OPTION="--color=always"
fi

# Use colors and filetype characters with ls by default
alias ls="ls -F $LS_COLOR_OPTION"
# show me all files (long list)
alias ll='ls -al'
# show me everything human readable
alias lsa='ll -h'
# sort by size
alias lss='lsa -Sr'
# sort by date modified
alias lsdate='lsa -tr'
# don't list directories
alias lsd='lsa -d'
# list all dot files
alias lsdot='lsd .*'

alias df='df -h'

# tar aliases.  ignore OS X meta files
# NOTE: on OS X tar is freaked out by resource forks.  see .zshenv for the fix.
alias targzc='tar --exclude=".DS_Store" --exclude="*pyc" -zcvf'
alias tarbzc='tar --exclude=".DS_Store" --exclude="*pyc" -jcvf'
alias targzx='tar -zxvf'
alias tarbzx='tar -xvjf'
# 7zip
alias 7zultra='7za a -t7z -m0=lzma -mx=9 -mfb=64 -md=32m -ms=on'

# always show all versions of an executable
alias wha="which -a"
alias whicha="which -a"

# ssh over a slow connection
alias sshc="ssh -C -c blowfish"

# get my external ip address
if checkPath pbcopy; then
    alias whatsmyip="curl -s ip.appspot.com | pbcopy && pbpaste"
else
    alias whatsmyip="curl -s ip.appspot.com"
fi

# can't break the OS X habit :)
if checkPath open; then
    # Don't do anything
    true
elif checkPath rifle; then
    # Use Ranger's Rifle
    alias open=rifle
elif checkPath gnome-open; then
    # Use Gnome's opener
    alias open=gnome-open
elif checkPath xdg-open; then
    # Use the X opener
    alias open=xdg-open
fi

# etckeeper aliases
alias etck="sudo etckeeper"
alias etckv="etck vcs"
alias etcks="etckv status"

# Shortened commands
alias g=git
alias s=svn

# Tmux shortcuts, use wemux if available
if checkPath wemux; then
    alias t=wemux
else
    alias t=tmux
    alias ta='t attach -t '
    alias tn='t new-session -s '
fi

# Virtualenv/wrapper stuff
alias w=workon
alias mkv=mkvirtualenv
alias cds=cdsitepackages

# Pretty LS_COLORS explanation: 
# http://www.mjxg.com/index.py/geek/lscolors_and_ls_colors
export LS_COLORS="no=00:fi=00:di=32:ln=36:pi=40;33:so=01;35:bd=40;33;01:cd=40;33;01:or=01;05;37;41:mi=01;05;37;41:ex=31:*.cmd=01;32:*.exe=01;32:*.com=01;32:*.btm=01;32:*.bat=01;32:*.sh=01;32:*.csh=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.bz=01;31:*.tz=01;31:*.rpm=01;31:*.cpio=01;31:*.jpg=01;35:*.gif=01;35:*.bmp=01;35:*.xbm=01;35:*.xpm=01;35:*.png=01;35:*.tif=01;35:"

VIRTUALENVS_DIR=$HOME/.virtualenvs
# if the virutalenv wrapper is available, then source it
if [ -d $VIRTUALENVS_DIR ]; then
    export WORKON_HOME=$VIRTUALENVS_DIR
    if checkPath virtualenvwrapper_bashrc; then
        source virtualenvwrapper_bashrc
    elif checkPath virtualenvwrapper.sh; then
        source virtualenvwrapper.sh
    fi
fi


# Tmuxinator setup
[[ -s $HOME/.tmuxinator/scripts/tmuxinator ]] && source $HOME/.tmuxinator/scripts/tmuxinator

# Nix setup
if [ -e $HOME/.nix-profile/etc/profile.d/nix.sh ]; then . $HOME/.nix-profile/etc/profile.d/nix.sh; fi

## Functions

# start up a buildout given a myriad of ways to try
function bfg() {
    ACTION="start"
    # Any argument causes a shutdown
    [[ -n "$1" ]] && ACTION="stop"

    instance=
    instance_names=(instance client)
    # Devine an instance executable, sometimes called "client", and sometimes with a number
    for i in ${instance_names[@]}
    do
        if [[ -x "bin/$i" ]]; then
            instance=$i
            break
        elif [[ -x "bin/${i}1" ]]; then
            instance="${i}1"
            break
        fi
    done

    zeo=
    zeo_names=(zeo zeoserver)
    # Devine a zeo executable, most of the time either zeoserver or zeo
    for i in ${zeo_names[@]}
    do
        if [[ -x "bin/$i" ]]; then
            zeo=$i
            break
        fi
    done

    # start or stop a supervisor based install
    if [ -x bin/supervisord ]; then
        if [[ $ACTION == "start" ]]; then
            bin/supervisord
            # XXX: instance shouldn't be set, but seems to be anyway...
            if [ -x "bin/$instance" ]; then
                bin/$instance fg
            fi
        else
            bin/supervisorctl shutdown
        fi
    # use the old control script
    elif [ -x bin/control ]; then
        if [[ $ACTION == "start" ]]; then
            bin/control fg
        else
            bin/control stop
        fi
    # use the new control script
    elif [ -x scripts/control ]; then
        if [[ $ACTION == "start" ]]; then
            scripts/control fg
        else
            scripts/control stop
        fi
    # no script, just use the executables directly
    elif [ -n "$zeo" ] && [ -n "$instance" ]; then
        if [[ $ACTION == "start" ]]; then
            bin/$zeo start
            bin/$instance fg
        else
            bin/$zeo stop
        fi
    # no zeoserver, just use the instance
    elif [[ $ACTION == "start" ]] && [ -n "$instance" ]; then
        bin/$instance fg
    else
        print "Couldn't find a start script. Is this a third party buildout?"
    fi
}

# launch a VMWare vm in the background
#
# Set $VM_LIBRARY and $VM_VMRUN to alternate locations if
# necessary
export VM_LIBRARY="$HOME/Documents/Virtual Machines.localized"
if [ -e "/Library/Application Support/VMWare Fusion/vmrun" ]; then
    export VM_VMRUN="/Library/Application Support/VMware Fusion/vmrun"
else
    export VM_VMRUN="/Applications/VMware Fusion.app/Contents/Library/vmrun"
fi
function noguivm() {
    local vmx_name
    local vm_location
    # the vmx filename will be based on the first arg given
    vmx_name="$1.vmwarevm/$1.vmx"
    # We will default to FreeBSD since that is the one used most
    [ -z "$1" ] && vmx_name="FreeBSD.vmwarevm/FreeBSD.vmx"
    vm_location="$VM_LIBRARY/$vmx_name"
    # If that file exists, let's start up the VM
    # XXX: couldn't get the test to work...
    if [[ -e $vm_location ]]; then
        print "Starting $vm_location"
        # XXX: This is silly, wtf.
        eval "'$VM_VMRUN'" -T fusion start "'$vm_location'" nogui
    else
        print "VM not available: $vm_location"
    fi
}
